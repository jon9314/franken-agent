# Nginx configuration for serving a React Single Page Application (SPA)

server {
    # Nginx will listen on port 80 inside the Docker container.
    # This port will be mapped to a host port by docker-compose.yml for Caddy to proxy to.
    listen 80 default_server;
    listen [::]:80 default_server; # Also listen on IPv6

    # The server_name can be set to '_' to act as a default for any hostname,
    # which is perfect when it's sitting behind another reverse proxy like Caddy.
    server_name _;

    # The root directory where the static files of the built React app are located.
    # This path must match exactly where the files are copied in the frontend Dockerfile (Stage 2).
    root /usr/share/nginx/html;

    # The default file to serve if a directory is requested.
    index index.html index.htm;

    # Main location block to handle all incoming requests.
    location / {
        # This is the crucial part for SPAs:
        # 1. First, try to serve the requested URI as a static file ($uri).
        #    (e.g., /assets/logo.png -> /usr/share/nginx/html/assets/logo.png)
        # 2. If a file is not found, try to serve it as a directory ($uri/).
        #    (This is less common for SPAs but is standard practice).
        # 3. If neither of the above is found, fall back to serving the /index.html file.
        #    This allows all non-asset routes (like /chat, /admin/users, /genealogy/trees/5)
        #    to be handled by the React application's client-side router (React Router).
        try_files $uri $uri/ /index.html;
    }

    # Optional: Add specific cache control headers for static assets.
    # This tells browsers and downstream proxies to cache these files for a long time,
    # improving performance for repeat visitors. Vite typically includes hashes in filenames
    # for assets, so aggressive caching is safe.
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|svg|woff|woff2|ttf|eot|webmanifest|xml|txt)$ {
        # Cache these assets in browsers for 1 year.
        expires 1y;
        # "public" allows shared caches (like CDNs) to store it.
        # "immutable" tells browsers this file will never change, so don't even bother revalidating.
        add_header Cache-Control "public, immutable";
        # Optionally disable access logging for static assets to reduce log noise.
        access_log off;
    }

    # Optional: Gzip/Brotli compression settings.
    # Modern Nginx images often have gzip enabled by default with sensible settings.
    # You can customize it here if you need more control or want to enable Brotli (if compiled in).
    # gzip on;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
}